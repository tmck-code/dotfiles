#!/bin/bash

# e.g.
# 2018-03-31 17:19:21 +1100 AEDT   memcached                                       latest              784b59c50820
function images_pretty() {
  echo -e "\n- Images:\n"
	docker images --format "table {{.CreatedAt}} {{.ID}} {{.Repository}}:{{.Tag}}"
}

function ps_pretty() {
  echo -e "\n- Containers:\n"
  docker ps -a --format "table {{.RunningFor}}\t{{.ID}} {{.Names}}\t{{.Image}}"
}

function networks_pretty()  {
  cat <<EOF
Networks:
$(docker network ls)
EOF
}

function count_images() {
  docker images -q | wc -l
}

function count_containers() {
  docker ps -aq | wc -l
}

function dls() {
  cat <<EOF
$(networks_pretty && images_pretty && ps_pretty)

Summary
No. of images: $(count_images)
No. of containers: $(count_containers)
EOF
}

function stop_containers () {
    echo -e "\n> Stopping all containers"
    ids=$(docker ps -aq)
    if [ -n "${ids}" ]; then
        docker stop "${ids}"
    fi
}

function purge_containers () {
    echo -e "\n> Force-removing all containers"
    docker ps -aq | xargs -n 1 -P 4 docker rm -f
}

function prune_volumes() {
    echo -e "\n> Pruning volumes"
    docker volume prune -f
}

function prune_networks() {
    echo -e "\n> Pruning networks"
    docker network prune -f
}

function cleanup_images () {
  echo -e "\n> Removing all <none> images"
  docker images | grep '\s<none>\s' | sed -E 's/ +/,/g' | cut -d ',' -f 3 | xargs docker rmi -f
}

function engine_status() {
  until docker ps; do sleep 1; done
  echo -e "\n> Docker Engine is up"
}

function cleanup () {
    purge_containers
    cleanup_images
    prune_networks
    # prune_volumes
    dls
}

case ${1} in
    "ls" ) dls;;
    "st" ) engine_status;;
    "sc" ) stop_containers;;
    "ci" ) cleanup_images;;
    "pv" ) prune_volumes;;
    "pn" ) prune_networks;;
    "pc" ) purge_containers;;
    "cleanup") cleanup;;
esac

