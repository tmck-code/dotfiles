#!/bin/bash

# 2018-03-31 17:19:21 +1100 AEDT  memcached  latest 784b59c50820
function ls_images()        { docker images --format "table {{.CreatedAt}} {{.ID}} {{.Repository}}:{{.Tag}}"; }
function ps()               { docker ps -a --format "table {{.RunningFor}}\t{{.ID}} {{.Names}}\t{{.Image}}"; }
function ls_networks()      { docker network ls; }
function count_images()     { docker images -q | wc -l; }
function count_containers() { docker ps -aq | wc -l; }

function dls() {
  cat <<EOF
- Networks:
$(ls_networks)

- Images:
$(ls_images)

- Containers:
$(ps)

- Summary:
No. of images:		$(count_images)
No. of containers:	$(count_containers)
EOF
}

function purge_containers () { echo -e "\n> Purging all containers"; docker ps -aq | xargs docker rm -f; }
function prune_volumes()     { echo -e "\n> Pruning volumes"; docker volume ls -q | xargs docker volume rm -f; }
function prune_networks()    { echo -e "\n> Pruning networks"; docker network prune -f; }

function cleanup_images () {
  echo -e "\n> Removing dangling images"
  docker images --filter=dangling=true -q | xargs docker rmi -f
}

function cleanup () {
  purge_containers
  cleanup_images
  prune_networks
  echo "$OPTS" [ "${OPTS:-}" == "--volumes" ]
  [ "${OPTS:-}" == "--volumes" ] && prune_volumes
  dls
}

function engine_status() {
  until docker ps; do sleep 1; done
  echo -e "\n> Docker Engine is up"
}

function arch() {
  docker images -q \
    | parallel -n1 -P12 docker image inspect ::: | jq -rc '.[] | [.Os, .Architecture, .RepoTags[]] | join(" | ")' \
    | sort -t'|' -k3
}

# Grab the 2nd command-line arg (if supplied) and use it for options
OPTS="${*:2}"

case ${1} in
  "ls")      dls;;
  "cleanup") cleanup;;
  "st")      engine_status;;
  "arch")    arch;;
esac

