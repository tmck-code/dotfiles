#!/bin/bash

set -euo pipefail

[ -n "${DEBUG:-}" ] && set -x

FIGLET_FONTS_DIR="$(figlet -I2)"

function usage() {
  echo "Usage: $0 [-m|--message <message>] [-f|--font <font>] [-d|--demo]" >&2
}

CHOICES=(
  "3d_diagonal" "3d" "3d_diagonal" "amc_aaa01" "ansi_regular"
  "ansi_shadow" "big_money-ne" "bloody" "bolger"
  "calvin_s" "dos_rebel" "delta_corps_priest_1" "elite"
  "filter" "georgia11" "nscript" "the_edge" "amcaaa01"
  "basic" "broadway" "colossal" "doh" "fraktur"
  "kompaktblk" "larry3d" "maxiwi" "miniwi" "nancyj-fancy"
  "nancyj-underlined" "nv_script" "o8" "poison" "roman"
  "rowancap" "rozzo" "sblood" "stencil" "stencil"
  "thick" "univers" "whimsy"
)

# prints a message with a figlet font
function print_message() {
  local message="$1"
  local colour="${2:-1}"
  local choice="${3:-}"

  if [[ -z "$choice" ]]; then
    choice="${CHOICES[$RANDOM % ${#CHOICES[@]}]}"
  fi

  if ! test -f "$FIGLET_FONTS_DIR/$choice"; then
    choice=$(find "$FIGLET_FONTS_DIR" -iname "${choice}.???" | head -n1)
  fi

  msg=$(echo -e "$message" \
    | figlet -f "$choice" -w "$(tput cols)")
  if [ "$colour" -eq 1 ]; then
    echo -e "$msg" | lolcat -h "0.$[ $RANDOM % 10 ]" -f
  else
    echo -e "$msg"
  fi
    # | lolcat -h "0.$[ $RANDOM % 10 ]" -f
}

# prints a message with a figlet font, centered using padding above/below the message
function display_message() {
  local message="$1"
  local colour="${2:-1}"
  local choice="${3:-}"

  local msg=$(print_message "$message" "$colour" "$choice")
  local n_lines=$(echo "$msg" | wc -l)

  clear
  # pad the top/above the figlet message
  for _ in $(seq 0 $(( $(( $(tput lines) - $n_lines )) / 2 ))); do echo ; done
  # display the figlet message
  echo -e "$msg"
  # pad the bottom/below the figlet message
  for _ in $(seq 0 $(( $(( $(tput lines) - $n_lines )) / 2 ))); do echo ; done
}

# cycles through each chosen figlet font displaying the message. press any key to continue
function demo_message() {
  local message="$1"
  local colour="${2:-}"
  for f in "${CHOICES[@]}"; do
    echo "$f"
    display_message "$message" "$f" "$colour"
    echo "$f"
    read -n1 -s -r -p "Press any key to continue"
  done
}

display= print= demo= msg= font= colour=1
while test $# -gt 0; do
  case "$1" in
    -h|--help)    usage; exit 0 ;;
    -d|--display) display=1; shift; msg="$1"; shift ;;
    -p|--print)   print=1;   shift; msg="$1"; shift ;;
    -f|--font)               shift; font="$1"; shift ;;
    -D|--demo)    demo=1;    shift; msg="${1:-Hello World!}"; shift;;
    -n|--no-colour) colour=0; shift ;;
    *)
      echo "Wrong arg: $1" >&2; usage; exit 1 ;;
  esac
done

if   [[ -n "$demo" ]];    then demo_message "$msg" "$colour"
elif [[ -n "$display" ]]; then display_message "$msg" "$colour" "$font"
elif [[ -n "$print" ]];   then print_message "$msg" "$colour" "$font"
else echo "No action specified" >&2; usage; exit 1
fi
