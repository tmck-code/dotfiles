#!/bin/bash

set -euo pipefail

[ -n "${DEBUG:-}" ] && set -x

FIGLET_FONTS_DIR="$(figlet -I2)"

function usage() {
  echo "Usage: $0 [-m|--message <message>] [-f|--font <font>] [-d|--demo]" >&2
}

CHOICES=(
  "3D Diagonal.flf" "3d.flf" "3d_diagonal.flf" "AMC AAA01.flf" "ANSI Regular.flf"
  "ANSI Shadow.flf" "Big Money-ne.flf" "Bloody.flf" "Bolger.flf"
  "Calvin S.flf" "DOS Rebel.flf" "Delta Corps Priest 1.flf" "Elite.flf"
  "Filter.flf" "Georgia11.flf" "NScript.flf" "The Edge.flf" "amcaaa01.flf"
  "basic.flf" "broadway.flf" "Colossal.flf" "Doh.flf" "Fraktur.flf"
  "kompaktblk.flf" "larry3d.flf" "maxiwi.flf" "miniwi.flf" "nancyj-fancy.flf"
  "nancyj-underlined.flf" "NV Script.flf" "o8.flf" "poison.flf" "roman.flf"
  "rowancap.flf" "Rozzo.flf" "sblood.flf" "stencil.flf" "stencil.flf"
  "thick.flf" "univers.flf" "whimsy.flf"
)

# prints a message with a figlet font
function print_message() {
  local message="$1"
  local choice="${2:-}"

  if [[ -z "$choice" ]]; then
    choice="${CHOICES[$RANDOM % ${#CHOICES[@]}]}"
  fi

  if ! test -f "$FIGLET_FONTS_DIR/$choice"; then
    choice=$(find "$FIGLET_FONTS_DIR" -iname "${choice}.???" | head -n1)
  fi

  echo -e "$message" \
    | figlet -f "$choice" -w "$(tput cols)" -c \
    | lolcat -h "0.$[ $RANDOM % 10 ]" -f
}

# prints a message with a figlet font, centered using padding above/below the message
function display_message() {
  local message="$1"
  local choice="${2:-}"

  local msg=$(print_message "$message" "$choice")
  local n_lines=$(echo "$msg" | wc -l)

  clear
  # pad the top/above the figlet message
  for _ in $(seq 0 $(( $(( $(tput lines) - $n_lines )) / 2 ))); do echo ; done
  # display the figlet message
  echo -e "$msg"
  # pad the bottom/below the figlet message
  for _ in $(seq 0 $(( $(( $(tput lines) - $n_lines )) / 2 ))); do echo ; done
}

# cycles through each chosen figlet font displaying the message. press any key to continue
function demo_message() {
  local message="$1"
  for f in "${CHOICES[@]}"; do
    echo "$f"
    display_message "$message" "$f"
    echo "$f"
    read -n1 -s -r -p "Press any key to continue"
  done
}

display= print= demo= msg= font=
while test $# -gt 0; do
  case "$1" in
    -h|--help)    usage; exit 0 ;;
    -d|--display) display=1; shift; msg="$1"; shift ;;
    -p|--print)   print=1;   shift; msg="$1"; shift ;;
    -f|--font)               shift; font="$1"; shift ;;
    -D|--demo)    demo=1;    shift; msg="${1:-Hello World!}"; shift;;
    *)
      echo "Wrong arg: $1" >&2; usage; exit 1 ;;
  esac
done

if   [[ -n "$demo" ]];    then demo_message "$msg"
elif [[ -n "$display" ]]; then display_message "$msg" "$font"
elif [[ -n "$print" ]];   then print_message "$msg" "$font"
else echo "No action specified" >&2; usage; exit 1
fi
