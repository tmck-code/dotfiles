#!/bin/bash

set -euo pipefail

function usage() {
  echo "Usage: $0 [-m|--message <message>] [-f|--font <font>] [-d|--demo]" >&2
}

CHOICES=(
  "3D Diagonal.flf" "3d.flf" "3d_diagonal.flf" "AMC AAA01.flf" "ANSI Regular.flf"
  "ANSI Shadow.flf" "Big Money-ne.flf" "Bloody.flf" "Bolger.flf"
  "Calvin S.flf" "DOS Rebel.flf" "Delta Corps Priest 1.flf" "Elite.flf"
  "Filter.flf" "Georgia11.flf" "NScript.flf" "The Edge.flf" "amcaaa01.flf"
  "basic.flf" "broadway.flf" "Colossal.flf" "Doh.flf" "Fraktur.flf"
  "kompaktblk.flf" "larry3d.flf" "maxiwi.flf" "miniwi.flf" "nancyj-fancy.flf"
  "nancyj-underlined.flf" "NV Script.flf" "o8.flf" "poison.flf" "roman.flf"
  "rowancap.flf" "Rozzo.flf" "sblood.flf" "stencil.flf" "stencil.flf"
  "thick.flf" "univers.flf" "whimsy.flf"
)

function display_message() {
  # prints a message with a figlet font, padding above/below the message
  # so that it appears in the center of the screen
  local message="$1"
  local choice="${2:-}"

  if [[ -z "$choice" ]]; then
    choice="${CHOICES[$RANDOM % ${#CHOICES[@]}]}"
  fi

  if ! test -f $PREFIX/share/figlet/$choice; then
    choice=$(find $PREFIX/share/figlet -iname "$choice" | head -n1)
  fi

  clear

  msg="$(echo -e "$message" \
    | figlet -f "$choice" -w "$(tput cols)" -c \
    | lolcat -h "0.$[ $RANDOM % 10 ]" -f)"
  n_lines=$(echo "$msg" | wc -l)

  # pad the top/above the figlet message
  for _ in $(seq 0 $(( $(( $(tput lines) - $n_lines )) / 2 ))); do echo ; done
  # for _ in $(seq 0 $(( $(( $(tput lines) / 2 )) - 5))); do echo ; done

  echo -e "$msg"

  # pad the bottom/below the figlet message
  # for _ in $(seq 0 $(( $(( $(tput lines) / 2 )) - 5))); do echo ; done
  for _ in $(seq 0 $(( $(( $(tput lines) - $n_lines )) / 2 ))); do echo ; done
}

function demo_message() {
  local message="$1"
  for f in "${CHOICES[@]}"; do
    echo "$f"
    display_message "$message" "$f"
    echo "$f"
    read -n1 -s -r -p "Press any key to continue"
  done
}

display= demo= msg= font=
while test $# -gt 0; do
  case "$1" in
    -h|--help) usage; exit 0 ;;
    -m|--message) display=1; shift; msg="$1"; shift ;;
    -f|--font) shift; font="$1"; shift ;;
    -d|--demo) demo=1; shift; msg="${1:-Hello World!}"; shift;;
    *) echo "Wrong arg: $1" >&2; usage; exit 1 ;;
  esac
done

if [[ -n "$demo" ]]; then
  demo_message "$msg"
elif [[ -n "$display" ]]; then
  display_message "$msg" true
fi
